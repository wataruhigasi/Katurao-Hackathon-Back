// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Articles", testArticles)
	t.Run("Comments", testComments)
	t.Run("Threads", testThreads)
}

func TestDelete(t *testing.T) {
	t.Run("Articles", testArticlesDelete)
	t.Run("Comments", testCommentsDelete)
	t.Run("Threads", testThreadsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesQueryDeleteAll)
	t.Run("Comments", testCommentsQueryDeleteAll)
	t.Run("Threads", testThreadsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceDeleteAll)
	t.Run("Comments", testCommentsSliceDeleteAll)
	t.Run("Threads", testThreadsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Articles", testArticlesExists)
	t.Run("Comments", testCommentsExists)
	t.Run("Threads", testThreadsExists)
}

func TestFind(t *testing.T) {
	t.Run("Articles", testArticlesFind)
	t.Run("Comments", testCommentsFind)
	t.Run("Threads", testThreadsFind)
}

func TestBind(t *testing.T) {
	t.Run("Articles", testArticlesBind)
	t.Run("Comments", testCommentsBind)
	t.Run("Threads", testThreadsBind)
}

func TestOne(t *testing.T) {
	t.Run("Articles", testArticlesOne)
	t.Run("Comments", testCommentsOne)
	t.Run("Threads", testThreadsOne)
}

func TestAll(t *testing.T) {
	t.Run("Articles", testArticlesAll)
	t.Run("Comments", testCommentsAll)
	t.Run("Threads", testThreadsAll)
}

func TestCount(t *testing.T) {
	t.Run("Articles", testArticlesCount)
	t.Run("Comments", testCommentsCount)
	t.Run("Threads", testThreadsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Articles", testArticlesHooks)
	t.Run("Comments", testCommentsHooks)
	t.Run("Threads", testThreadsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Articles", testArticlesInsert)
	t.Run("Articles", testArticlesInsertWhitelist)
	t.Run("Comments", testCommentsInsert)
	t.Run("Comments", testCommentsInsertWhitelist)
	t.Run("Threads", testThreadsInsert)
	t.Run("Threads", testThreadsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Articles", testArticlesReload)
	t.Run("Comments", testCommentsReload)
	t.Run("Threads", testThreadsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Articles", testArticlesReloadAll)
	t.Run("Comments", testCommentsReloadAll)
	t.Run("Threads", testThreadsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Articles", testArticlesSelect)
	t.Run("Comments", testCommentsSelect)
	t.Run("Threads", testThreadsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Articles", testArticlesUpdate)
	t.Run("Comments", testCommentsUpdate)
	t.Run("Threads", testThreadsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Articles", testArticlesSliceUpdateAll)
	t.Run("Comments", testCommentsSliceUpdateAll)
	t.Run("Threads", testThreadsSliceUpdateAll)
}
